import { useState } from "react";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Checkbox } from "@/components/ui/checkbox";
import { usePoker } from "@/contexts/PokerContext";
import { AutoGenerateParams } from "./useHostSchedule";
import { format } from "date-fns";
import { Calendar, Users, Clock } from "lucide-react";

interface AutoGenerateDialogProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  onGenerate: (params: AutoGenerateParams) => void;
}

export function AutoGenerateDialog({ open, onOpenChange, onGenerate }: AutoGenerateDialogProps) {
  const { players } = usePoker();
  const [startDate, setStartDate] = useState(format(new Date(), 'yyyy-MM-dd'));
  const [endDate, setEndDate] = useState('');
  const [frequency, setFrequency] = useState<'weekly' | 'biweekly' | 'monthly'>('weekly');
  const [selectedPlayers, setSelectedPlayers] = useState<string[]>([]);

  const handlePlayerToggle = (playerId: string) => {
    setSelectedPlayers(prev => 
      prev.includes(playerId) 
        ? prev.filter(id => id !== playerId)
        : [...prev, playerId]
    );
  };

  const handleSelectAll = () => {
    if (selectedPlayers.length === players.length) {
      setSelectedPlayers([]);
    } else {
      setSelectedPlayers(players.map(p => p.id));
    }
  };

  const handleGenerate = () => {
    if (!startDate || !endDate || selectedPlayers.length === 0) {
      return;
    }

    const params: AutoGenerateParams = {
      startDate: new Date(startDate + 'T00:00:00'),
      endDate: new Date(endDate + 'T00:00:00'),
      frequency,
      participantIds: selectedPlayers
    };

    onGenerate(params);
  };

  const isValid = startDate && endDate && selectedPlayers.length > 0;

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-md">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <Users size={20} />
            Gerar Lista de Jantares
          </DialogTitle>
        </DialogHeader>

        <div className="space-y-4">
          {/* Datas */}
          <div className="grid grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label htmlFor="start-date" className="flex items-center gap-1">
                <Calendar size={14} />
                Data Início
              </Label>
              <Input
                id="start-date"
                type="date"
                value={startDate}
                onChange={(e) => setStartDate(e.target.value)}
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="end-date" className="flex items-center gap-1">
                <Calendar size={14} />
                Data Final
              </Label>
              <Input
                id="end-date"
                type="date"
                value={endDate}
                onChange={(e) => setEndDate(e.target.value)}
                min={startDate}
              />
            </div>
          </div>

          {/* Frequência */}
          <div className="space-y-2">
            <Label className="flex items-center gap-1">
              <Clock size={14} />
              Frequência
            </Label>
            <Select value={frequency} onValueChange={(value: any) => setFrequency(value)}>
              <SelectTrigger>
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="weekly">Semanal</SelectItem>
                <SelectItem value="biweekly">Quinzenal</SelectItem>
                <SelectItem value="monthly">Mensal</SelectItem>
              </SelectContent>
            </Select>
          </div>

          {/* Participantes */}
          <div className="space-y-3">
            <div className="flex items-center justify-between">
              <Label className="flex items-center gap-1">
                <Users size={14} />
                Participantes
              </Label>
              <Button
                type="button"
                variant="ghost"
                size="sm"
                onClick={handleSelectAll}
                className="h-auto p-1 text-xs"
              >
                {selectedPlayers.length === players.length ? 'Desmarcar todos' : 'Selecionar todos'}
              </Button>
            </div>
            
            <div className="max-h-32 overflow-y-auto space-y-2 border rounded-md p-2">
              {players.length === 0 ? (
                <p className="text-sm text-muted-foreground text-center py-2">
                  Nenhum jogador cadastrado
                </p>
              ) : (
                players.map((player) => (
                  <div key={player.id} className="flex items-center space-x-2">
                    <Checkbox
                      id={player.id}
                      checked={selectedPlayers.includes(player.id)}
                      onCheckedChange={() => handlePlayerToggle(player.id)}
                    />
                    <Label
                      htmlFor={player.id}
                      className="text-sm font-normal cursor-pointer"
                    >
                      {player.name}
                    </Label>
                  </div>
                ))
              )}
            </div>
            
            {selectedPlayers.length > 0 && (
              <p className="text-xs text-muted-foreground">
                {selectedPlayers.length} jogador(es) selecionado(s)
              </p>
            )}
          </div>
        </div>

        <DialogFooter>
          <Button variant="outline" onClick={() => onOpenChange(false)}>
            Cancelar
          </Button>
          <Button onClick={handleGenerate} disabled={!isValid}>
            Gerar Lista
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}